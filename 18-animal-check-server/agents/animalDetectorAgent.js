import OpenAI from 'openai';
import { TextChunker } from '../utils/textChunker.js';
import { logger } from '../utils/logger.js';

export class AnimalDetectorAgent {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    this.model = 'gpt-4o-mini';
    this.chunker = new TextChunker();
  }
  
  async findAnimals(text) {
    const chunks = this.chunker.splitText(text);
    
    if (chunks.length > 1) {
      logger.info(`üì¶ –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    }
    
    const allAnimals = [];
    
    for (let i = 0; i < chunks.length; i++) {
      logger.info(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.length}...`);
      
      const animals = await this.analyzeChunk(chunks[i], i + 1);
      
      if (animals && animals.length > 0) {
        allAnimals.push(...animals);
        logger.info(`   –ù–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: ${animals.length}`);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueAnimals = await this.mergeAnimals(allAnimals);
    
    return uniqueAnimals;
  }
  
  async analyzeChunk(text, chunkNumber) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.

–ü–æ–¥ "–∂–∏–≤–æ—Ç–Ω—ã–º–∏" –ø–æ–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –∂–∏–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ –∫—Ä–æ–º–µ —á–µ–ª–æ–≤–µ–∫–∞: –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, –ø—Ç–∏—Ü—ã, —Ä—ã–±—ã, –Ω–∞—Å–µ–∫–æ–º—ã–µ, –ø–∞—É–∫–∏, –º–æ–ª–ª—é—Å–∫–∏, —á–µ—Ä–≤–∏, —Ä–µ–ø—Ç–∏–ª–∏–∏, –∞–º—Ñ–∏–±–∏–∏ –∏ —Ç.–¥.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —É–∫–∞–∂–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –í–∫–ª—é—á–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ), –∫–æ—Ç–æ—Ä—ã–µ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∂–∏–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∞
- –ù–ï –≤–∫–ª—é—á–∞–π —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö: –Ω–∞—Ä–µ—á–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"), –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ, –≥–ª–∞–≥–æ–ª—ã, —á–∞—Å—Ç–∏ —Ä–µ—á–∏
- –ù–ï –≤–∫–ª—é—á–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–±–∏–≤–µ–Ω—å", "—Ö–≤–æ—Å—Ç", "–∫–ª—ã–∫" - –ù–ï–¢, "—Å–ª–æ–Ω" - –î–ê)
- –ù–ï –≤–∫–ª—é—á–∞–π –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø—Ç–∏—Ü—ã", "–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ", "—Ä–µ–ø—Ç–∏–ª–∏–∏")
- –£–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–æ–≤ –∏ —Ä–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫", "–≥–æ–ª—É–±—å", "–æ—Ä–∞–Ω–≥—É—Ç–∞–Ω–≥", "–≤–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä")
- –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤ - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

–ü—Ä–∏–º–µ—Ä—ã –ü–†–ê–í–ò–õ–¨–ù–´–• –Ω–∞–∑–≤–∞–Ω–∏–π: "—Å–ª–æ–Ω", "–≤–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä", "—Ç–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä —Ä–µ–∫—Å", "–∫–æ—à–∫–∞", "–º—É—Ö–∞"
–ü—Ä–∏–º–µ—Ä—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• (–ù–ï –≤–∫–ª—é—á–∞–π): "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–∫—Ä–∞—Å–∏–≤–æ", "–±–æ–ª—å—à–æ–π", "–±–∏–≤–µ–Ω—å", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ"

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ",
    "context": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
  }
]

–ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: []

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
${text}`;

    try {
      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∑–æ–æ–ª–æ–≥ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö. –¢—ã —É–º–µ–µ—à—å –æ—Ç–ª–∏—á–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤. –í–∫–ª—é—á–∞–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        response_format: { type: 'json_object' }
      });
      
      const content = response.choices[0].message.content;
      
      // –ü–∞—Ä—Å–∏–º JSON
      let parsed;
      try {
        parsed = JSON.parse(content);
      } catch (e) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —á–∞—Å—Ç–∏ ${chunkNumber}: ${e.message}`);
        return [];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      if (Array.isArray(parsed)) {
        return parsed;
      } else if (parsed.animals && Array.isArray(parsed.animals)) {
        return parsed.animals;
      } else if (parsed.result && Array.isArray(parsed.result)) {
        return parsed.result;
      }
      
      return [];
      
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏ ${chunkNumber}: ${error.message}`);
      throw error;
    }
  }
  
  async mergeAnimals(animals) {
    if (animals.length === 0) return [];
    if (animals.length === 1) return animals;
    
    // –®–∞–≥ 1: –£–±–∏—Ä–∞–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueByName = new Map();
    
    for (const animal of animals) {
      const name = animal.name.toLowerCase().trim();
      
      if (uniqueByName.has(name)) {
        const existing = uniqueByName.get(name);
        existing.context += ' ' + animal.context;
      } else {
        uniqueByName.set(name, {
          name: animal.name,
          context: animal.context
        });
      }
    }
    
    const afterExactMerge = Array.from(uniqueByName.values());
    
    if (afterExactMerge.length === 1) return afterExactMerge;
    
    // –®–∞–≥ 2: –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ AI
    try {
      const names = afterExactMerge.map(a => a.name).join('\n');
      
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —è–≤–ª—è—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –û–î–ù–û–ì–û –ò –¢–û–ì–û –ñ–ï –≤–∏–¥–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.

–°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö:
${names}

–ü–†–ê–í–ò–õ–ê:
- –£–±–µ—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã: –µ—Å–ª–∏ –µ—Å—Ç—å "–º–µ–¥–≤–µ–¥—å" –∏ "–±—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å" - –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ "–±—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å" (–±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ)
- –£–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ/–ø–æ–ª–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "–º–µ–¥–≤–µ–¥–∏—Ü–∞", "–º–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "–º–µ–¥–≤–µ–∂–∞—Ç–∞" - —ç—Ç–æ –≤—Å–µ "–º–µ–¥–≤–µ–¥—å"
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∏–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–±—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å") - –æ—Å—Ç–∞–≤—å –µ–≥–æ, –∞ –Ω–µ –æ–±—â–µ–µ "–º–µ–¥–≤–µ–¥—å"
- –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–µ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ - –æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ
- –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –æ—Å—Ç–∞–≤—å –≤—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–≤–æ–ª–∫" –∏ "–º–µ–¥–≤–µ–¥—å" - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "animals": ["–Ω–∞–∑–≤–∞–Ω–∏–µ1", "–Ω–∞–∑–≤–∞–Ω–∏–µ2", ...]
}

–û—Å—Ç–∞–≤–ª—è–π —Å–∞–º—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–æ–≤.`;

      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∑–æ–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        response_format: { type: 'json_object' }
      });
      
      const content = response.choices[0].message.content;
      const parsed = JSON.parse(content);
      
      if (parsed.animals && Array.isArray(parsed.animals)) {
        const uniqueNames = parsed.animals;
        const result = afterExactMerge.filter(animal => 
          uniqueNames.some(name => name.toLowerCase() === animal.name.toLowerCase())
        );
        
        logger.info({ 
          original: animals.length,
          afterExact: afterExactMerge.length,
          afterSemantic: result.length
        }, 'Animals merged');
        
        return result;
      }
    } catch (error) {
      logger.error({ error: error.message }, 'Error in semantic merge, using exact merge only');
    }
    
    // –ï—Å–ª–∏ AI merge –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—á–Ω–æ–≥–æ merge
    if (animals.length > afterExactMerge.length) {
      logger.info({ original: animals.length, merged: afterExactMerge.length }, 'Exact duplicates merged');
    }
    
    return afterExactMerge;
  }
  
  async validateAnimalName(name) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.

–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞: "${name}"

–ö–†–ò–¢–ï–†–ò–ò –ü–†–û–í–ï–†–ö–ò:
- –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–º –∂–∏–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ (–∂–∏–≤–æ—Ç–Ω–æ–µ)?
- –í–∫–ª—é—á–∞–µ—Ç: –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, –ø—Ç–∏—Ü—ã, —Ä—ã–±—ã, –Ω–∞—Å–µ–∫–æ–º—ã–µ, –ø–∞—É–∫–∏, –º–æ–ª–ª—é—Å–∫–∏, —á–µ—Ä–≤–∏, —Ä–µ–ø—Ç–∏–ª–∏–∏, –∞–º—Ñ–∏–±–∏–∏ –∏ —Ç.–¥.
- –ù–ï –≤–∫–ª—é—á–∞–µ—Ç: –Ω–∞—Ä–µ—á–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"), –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ, –≥–ª–∞–≥–æ–ª—ã, —á–∞—Å—Ç–∏ —Ä–µ—á–∏
- –ù–ï –≤–∫–ª—é—á–∞–µ—Ç: —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–±–∏–≤–µ–Ω—å", "—Ö–≤–æ—Å—Ç", "–∫–ª—ã–∫")
- –ù–ï –≤–∫–ª—é—á–∞–µ—Ç: –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ", "–ø—Ç–∏—Ü—ã")

–ü—Ä–∏–º–µ—Ä—ã –ñ–ò–í–û–¢–ù–´–•: "—Å–ª–æ–Ω", "–≤–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä", "—Ç–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä —Ä–µ–∫—Å", "–∫–æ—à–∫–∞", "–º—É—Ö–∞", "—Å–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å"
–ü—Ä–∏–º–µ—Ä—ã –ù–ï –ñ–ò–í–û–¢–ù–´–•: "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–∫—Ä–∞—Å–∏–≤–æ", "–±–æ–ª—å—à–æ–π", "–±–∏–≤–µ–Ω—å", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ"

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "isAnimal": true –∏–ª–∏ false,
  "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É"
}`;

    try {
      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∑–æ–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        response_format: { type: 'json_object' }
      });
      
      const content = response.choices[0].message.content;
      const parsed = JSON.parse(content);
      
      return parsed.isAnimal === true;
      
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ${error.message}`);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å true —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return true;
    }
  }
}

