import OpenAI from 'openai';
import { logger } from '../utils/logger.js';

export class ZoologistAgent {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    this.model = 'gpt-4o-mini';
  }
  
  async getReports(animals) {
    const reports = [];
    
    for (let i = 0; i < animals.length; i++) {
      logger.info(`üî¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ ${i + 1}/${animals.length}: ${animals[i].name}`);
      
      const report = await this.analyzeAnimal(animals[i]);
      reports.push(report);
    }
    
    return reports;
  }
  
  async analyzeAnimal(animal) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Perplexity
    let perplexityInfo = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Perplexity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
    let hasPerplexityData = false;
    
    if (animal.perplexityResults && animal.perplexityResults.results) {
      const results = animal.perplexityResults.results;
      logger.info({ 
        animalName: animal.name, 
        resultsCount: results.length,
        firstResultTitle: results[0]?.title,
        firstResultSnippetLength: results[0]?.snippet?.length
      }, 'Perplexity results received');
      
      if (results.length > 0) {
        hasPerplexityData = true;
        perplexityInfo = results.map((result, index) => {
          const snippet = result.snippet || '–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
          return `
–ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${result.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}
URL: ${result.url || 'N/A'}
–ö–æ–Ω—Ç–µ–Ω—Ç: ${snippet.substring(0, 2000)}
`;
        }).join('\n---\n');
        
        logger.info({ 
          animalName: animal.name,
          totalInfoLength: perplexityInfo.length
        }, 'Formatted Perplexity info');
      }
    } else {
      logger.warn({ animalName: animal.name }, 'No Perplexity results in animal object');
    }
    
    let prompt;
    
    if (hasPerplexityData) {
      prompt = `–¢—ã –±–∏–æ–ª–æ–≥ –∏ –∑–æ–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º: ${animal.name}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í:
${perplexityInfo}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏ –æ–±–æ–±—â–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

1. –û–ü–ò–°–ê–ù–ò–ï - –ß—Ç–æ —ç—Ç–æ –∑–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ? –ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è? –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
2. –ú–û–†–§–û–§–ò–ó–ò–û–õ–û–ì–ò–Ø - –†–∞–∑–º–µ—Ä—ã, —Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–ª–∞, –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
3. –ü–û–í–ï–î–ï–ù–ò–ï - –ö–∞–∫ –ø–∏—Ç–∞–µ—Ç—Å—è, —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è, –≤–µ–¥–µ—Ç —Å–µ–±—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.
4. –ê–†–ï–ê–õ –û–ë–ò–¢–ê–ù–ò–Ø - –ì–¥–µ –æ–±–∏—Ç–∞–µ—Ç –∏–ª–∏ –æ–±–∏—Ç–∞–ª–æ, –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ, —Å—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –ò–∑–≤–ª–µ–∫–∞–π –õ–Æ–ë–£–Æ –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –¥–µ–ª—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- –ü–∏—à–∏ –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
- –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –ø–∏—à–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞"
- –ù–ï –ø–∏—à–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞" –µ—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –µ—Å—Ç—å

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "animal": "${animal.name}",
  "description": "—Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
  "morphophysiology": "—Ç–µ–∫—Å—Ç –æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏",
  "behavior": "—Ç–µ–∫—Å—Ç –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏",
  "habitat": "—Ç–µ–∫—Å—Ç –æ–± –∞—Ä–µ–∞–ª–µ –æ–±–∏—Ç–∞–Ω–∏—è"
}`;
    } else {
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ Perplexity –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
      prompt = `–¢—ã –±–∏–æ–ª–æ–≥ –∏ –∑–æ–æ–ª–æ–≥. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –Ω–∞—É—á–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –æ –∂–∏–≤–æ—Ç–Ω–æ–º: ${animal.name}

–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${animal.context}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –Ω–∞—É—á–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞—Å–ø–µ–∫—Ç–∞–º:

1. **–û–ø–∏—Å–∞–Ω–∏–µ**: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
2. **–ú–æ—Ä—Ñ–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è**: —Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–ª–∞, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è, –≥–µ–Ω–µ—Ç–∏–∫–∞ (–∫—Ä–∞—Ç–∫–æ)
3. **–ü–æ–≤–µ–¥–µ–Ω–∏–µ**: —Å–ø–æ—Å–æ–±—ã –ø–∏—Ç–∞–Ω–∏—è, —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è, –æ–±—â–µ–Ω–∏—è
4. **–ê—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è**: –≥–¥–µ –∂–∏–≤–µ—Ç –∏–ª–∏ –∂–∏–ª–æ

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –ø—É–Ω–∫—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –Ω–∞–ø–∏—à–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—É–Ω–∫—Ç –º–∞–∫—Å–∏–º—É–º)
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "animal": "–ù–∞–∑–≤–∞–Ω–∏–µ",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'",
  "morphophysiology": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'",
  "behavior": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'",
  "habitat": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'"
}`;
    }

    try {
      const systemPrompt = hasPerplexityData 
        ? '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∏–æ–ª–æ–≥ –∏ –∑–æ–æ–ª–æ–≥. –¢—ã –î–û–õ–ñ–ï–ù —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á—å –í–°–Æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –∏ –æ–±–æ–±—â–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–ï –æ—Ç–≤–µ—á–∞–π "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç" –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
        : '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∏–æ–ª–æ–≥ –∏ –∑–æ–æ–ª–æ–≥. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –Ω–∞—É—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Ç–æ—á–Ω—ã–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.';
      
      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 1500,
        response_format: { type: 'json_object' }
      });
      
      const content = response.choices[0].message.content;
      
      logger.info({
        animalName: animal.name,
        contentLength: content.length,
        contentPreview: content.substring(0, 200)
      }, 'GPT response received');
      
      // –ü–∞—Ä—Å–∏–º JSON
      let parsed;
      try {
        parsed = JSON.parse(content);
        logger.info({ 
          animalName: animal.name, 
          hasDescription: !!parsed.description,
          hasMorphophysiology: !!parsed.morphophysiology,
          hasBehavior: !!parsed.behavior,
          hasHabitat: !!parsed.habitat,
          descriptionLength: parsed.description?.length || 0,
          morphophysiologyLength: parsed.morphophysiology?.length || 0,
          behaviorLength: parsed.behavior?.length || 0,
          habitatLength: parsed.habitat?.length || 0
        }, 'Animal report generated');
      } catch (e) {
        logger.error({ error: e.message, animalName: animal.name, content }, 'JSON parsing error');
        return {
          animal: animal.name,
          error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞'
        };
      }
      
      return parsed;
      
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${animal.name}: ${error.message}`);
      return {
        animal: animal.name,
        error: error.message
      };
    }
  }
}

