import dotenv from 'dotenv';
import { Telegraf } from 'telegraf';
import pino from 'pino';
import { WebParser } from './utils/webParser.js';
import { AnimalDetectorAgent } from './agents/animalDetectorAgent.js';
import { ZoologistAgent } from './agents/zoologistAgent.js';
import { PerplexitySearch } from './services/perplexitySearch.js';

dotenv.config();

// –õ–æ–≥–≥–µ—Ä
const logger = pino({
  level: process.env.LOG_LEVEL || 'info'
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
const STATE = {
  IDLE: 'idle',
  WAITING_FOR_URL: 'waiting_for_url',
  SELECTING_ANIMAL_FROM_ARTICLE: 'selecting_animal_from_article',
  WAITING_FOR_ANIMAL_NAME: 'waiting_for_animal_name'
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(chatId) {
  if (!userStates.has(chatId)) {
    userStates.set(chatId, {
      state: STATE.IDLE,
      animals: [],
      processedAnimals: []
    });
  }
  return userStates.get(chatId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function safeSendMessage(ctx, text, options = {}) {
  try {
    await ctx.reply(text, options);
  } catch (error) {
    logger.error({ error: error.message, chatId: ctx.chat.id }, 'Failed to send message');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const chatId = ctx.chat.id;
  logger.info({ chatId, username: ctx.from.username }, 'User started bot');
  
  const userState = getUserState(chatId);
  userState.state = STATE.IDLE;
  
  await safeSendMessage(
    ctx,
    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö.\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
    '/article - –ê–Ω–∞–ª–∏–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n' +
    '/animal - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º\n\n' +
    '/reset - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /reset
bot.command('reset', async (ctx) => {
  const chatId = ctx.chat.id;
  logger.info({ chatId }, 'User reset state');
  
  const userState = getUserState(chatId);
  userState.state = STATE.IDLE;
  userState.animals = [];
  userState.processedAnimals = [];
  
  await safeSendMessage(
    ctx,
    'üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
    '/article - –ê–Ω–∞–ª–∏–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n' +
    '/animal - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /article
bot.command('article', async (ctx) => {
  const chatId = ctx.chat.id;
  logger.info({ chatId }, 'User selected article command');
  
  const userState = getUserState(chatId);
  userState.state = STATE.WAITING_FOR_URL;
  userState.animals = [];
  userState.processedAnimals = [];
  
  await safeSendMessage(ctx, 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
});

// –ö–æ–º–∞–Ω–¥–∞ /animal
bot.command('animal', async (ctx) => {
  const chatId = ctx.chat.id;
  logger.info({ chatId }, 'User selected animal command');
  
  const userState = getUserState(chatId);
  userState.state = STATE.WAITING_FOR_ANIMAL_NAME;
  userState.animals = [];
  userState.processedAnimals = [];
  
  await safeSendMessage(ctx, 'ü¶Å –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) {
    return;
  }
  
  const userState = getUserState(chatId);
  
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è —Å—Ç–∞—Ç—å–∏
    if (userState.state === STATE.WAITING_FOR_URL) {
      await handleArticleUrl(ctx, text, userState);
    }
    // –í—ã–±–æ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç–∞—Ç—å—è)
    else if (userState.state === STATE.SELECTING_ANIMAL_FROM_ARTICLE) {
      await handleAnimalSelection(ctx, text, userState);
    }
    // –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    else if (userState.state === STATE.WAITING_FOR_ANIMAL_NAME) {
      await handleAnimalName(ctx, text, userState);
    }
    
  } catch (error) {
    logger.error({ error: error.message, stack: error.stack, chatId }, 'Error processing message');
    await safeSendMessage(
      ctx,
      '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Å—Ç–∞—Ç—å–∏
async function handleArticleUrl(ctx, url, userState) {
  const chatId = ctx.chat.id;
  logger.info({ chatId, url }, 'Processing article URL');
  
  await safeSendMessage(ctx, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
  
  try {
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const parser = new WebParser();
    const pageText = await parser.fetchText(url);
    
    if (!pageText || pageText.trim().length === 0) {
      await safeSendMessage(ctx, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
      userState.state = STATE.WAITING_FOR_URL;
      return;
    }
    
    await safeSendMessage(ctx, `‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω: ${pageText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ò—â–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
    await safeSendMessage(ctx, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    
    const detector = new AnimalDetectorAgent();
    const animals = await detector.findAnimals(pageText);
    
    if (!animals || animals.length === 0) {
      await safeSendMessage(ctx, '‚ùå –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
      userState.state = STATE.WAITING_FOR_URL;
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    userState.animals = animals;
    userState.state = STATE.SELECTING_ANIMAL_FROM_ARTICLE;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    let message = `‚úÖ –ù–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: ${animals.length}\n\n`;
    animals.forEach((animal, index) => {
      message += `${index + 1}. ${animal.name}\n`;
    });
    message += '\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:';
    
    await safeSendMessage(ctx, message);
    
  } catch (error) {
    logger.error({ error: error.message, stack: error.stack, chatId }, 'Error handling article URL');
    await safeSendMessage(ctx, '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
    userState.state = STATE.WAITING_FOR_URL;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
async function handleAnimalSelection(ctx, text, userState) {
  const chatId = ctx.chat.id;
  const selectedNumber = parseInt(text);
  
  if (isNaN(selectedNumber) || selectedNumber < 1 || selectedNumber > userState.animals.length) {
    await safeSendMessage(ctx, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ' + userState.animals.length);
    return;
  }
  
  const animal = userState.animals[selectedNumber - 1];
  logger.info({ chatId, animalName: animal.name }, 'User selected animal from article');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º
  await getAnimalInfo(ctx, animal, userState);
  
  // –û—Ç–º–µ—á–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
  userState.processedAnimals.push(selectedNumber - 1);
  
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
  const remainingAnimals = userState.animals.filter((_, index) => !userState.processedAnimals.includes(index));
  
  if (remainingAnimals.length > 0) {
    let message = '\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∂–∏–≤–æ—Ç–Ω—ã–µ:\n\n';
    userState.animals.forEach((animal, index) => {
      if (!userState.processedAnimals.includes(index)) {
        message += `${index + 1}. ${animal.name}\n`;
      }
    });
    message += '\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ /reset –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:';
    
    await safeSendMessage(ctx, message);
  } else {
    await safeSendMessage(
      ctx,
      '‚úÖ –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.'
    );
    userState.state = STATE.IDLE;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ–º–∞–Ω–¥–∞ /animal)
async function handleAnimalName(ctx, animalName, userState) {
  const chatId = ctx.chat.id;
  logger.info({ chatId, animalName }, 'User entered animal name');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–º
    await safeSendMessage(ctx, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø—Ä–æ—Å...');
    
    const detector = new AnimalDetectorAgent();
    const isAnimal = await detector.validateAnimalName(animalName);
    
    if (!isAnimal) {
      logger.info({ chatId, animalName }, 'Invalid animal name entered');
      await safeSendMessage(
        ctx,
        '‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–ª–æ–Ω", "–∫–æ—à–∫–∞", "–≤–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä") –∏–ª–∏ /reset –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.'
      );
      return;
    }
    
    const animal = {
      name: animalName,
      context: '–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
    
    await getAnimalInfo(ctx, animal, userState);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –µ—â–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
    await safeSendMessage(
      ctx,
      '\nü¶Å –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ /reset –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:'
    );
    
  } catch (error) {
    logger.error({ error: error.message, stack: error.stack, chatId, animalName }, 'Error validating animal name');
    await safeSendMessage(ctx, '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\nü¶Å –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ /reset –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:');
    userState.state = STATE.WAITING_FOR_ANIMAL_NAME;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω–æ–º —á–µ—Ä–µ–∑ Perplexity –∏ –∞–≥–µ–Ω—Ç–∞-–∑–æ–æ–ª–æ–≥–∞
async function getAnimalInfo(ctx, animal, userState) {
  const chatId = ctx.chat.id;
  try {
    await safeSendMessage(ctx, `üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: ${animal.name}...`);
    
    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Perplexity
    const perplexity = new PerplexitySearch();
    const query = `${animal.name} - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è, –±–∏–æ—Ö–∏–º–∏—è, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∞—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è`;
    
    const searchResults = await perplexity.search(query, {
      max_results: 5,
      max_tokens_per_page: 2048,
      country: 'RU'
    });
    
    logger.info({ 
      chatId, 
      animalName: animal.name,
      resultsCount: searchResults?.results?.length || 0,
      hasResults: !!(searchResults && searchResults.results)
    }, 'Perplexity search completed');
    
    await safeSendMessage(ctx, '‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞');
    
    // –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞-–∑–æ–æ–ª–æ–≥–∞
    await safeSendMessage(ctx, 'üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
    
    const animalWithInfo = {
      ...animal,
      perplexityResults: searchResults
    };
    
    const zoologist = new ZoologistAgent();
    const report = await zoologist.analyzeAnimal(animalWithInfo);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let message = `üìä *–ù–∞—É—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ: ${report.animal || animal.name}*\n\n`;
    
    if (report.error) {
      message += `‚ùå –û—à–∏–±–∫–∞: ${report.error}`;
    } else {
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${report.description || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç'}\n\n`;
      message += `üß¨ *–ú–æ—Ä—Ñ–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è:*\n${report.morphophysiology || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç'}\n\n`;
      message += `üêæ *–ü–æ–≤–µ–¥–µ–Ω–∏–µ:*\n${report.behavior || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç'}\n\n`;
      message += `üåç *–ê—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è:*\n${report.habitat || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç'}`;
    }
    
    await safeSendMessage(ctx, message, { parse_mode: 'Markdown' });
    
    logger.info({ chatId, animalName: animal.name }, 'Successfully processed animal info');
    
  } catch (error) {
    logger.error({ error: error.message, stack: error.stack, chatId, animalName: animal.name }, 'Error getting animal info');
    await safeSendMessage(ctx, '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logger.error({ error: err.message, stack: err.stack, chatId: ctx.chat?.id }, 'Bot error');
});

// Graceful shutdown
process.once('SIGINT', () => {
  logger.info('Bot stopping...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  logger.info('Bot stopping...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
logger.info('Bot started successfully');

