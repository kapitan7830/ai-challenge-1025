import dotenv from 'dotenv';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const MCP_SERVER_PATH = join(__dirname, '..', 'mcp', 'server.js');

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω–µ –≤–æ–¥—ã –≤ —Ä–µ–∫–µ
 */
export class RiverLevelAgent {
  constructor() {
    this.name = '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã';
    this.model = 'yandexgpt-lite';
    this.mcpClient = null;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
   */
  async connectToMCP() {
    if (this.mcpClient) {
      return; // –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    }

    const transport = new StdioClientTransport({
      command: 'node',
      args: [MCP_SERVER_PATH],
    });

    this.mcpClient = new Client(
      {
        name: 'river-level-agent',
        version: '1.0.0',
      },
      {
        capabilities: {},
      }
    );

    await this.mcpClient.connect(transport);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MCP —Å–µ—Ä–≤–µ—Ä—É');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω–µ –≤–æ–¥—ã —á–µ—Ä–µ–∑ MCP
   */
  async getRiverLevel() {
    if (!this.mcpClient) {
      await this.connectToMCP();
    }

    try {
      console.log('üì° –í—ã–∑—ã–≤–∞—é MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_river_level...');
      const result = await this.mcpClient.callTool({
        name: 'get_river_level',
        arguments: {},
      });

      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç MCP:', JSON.stringify(result, null, 2));
      const data = JSON.parse(result.content[0].text);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', data.success ? '—É—Å–ø–µ—à–Ω–æ' : '—Å –æ—à–∏–±–∫–æ–π');
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getRiverLevel:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
   * @param {string} userQuestion - –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
   */
  async analyzeWaterLevel(userQuestion) {
    console.log(`\nüåä ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...`);
    console.log(`‚ùì –í–æ–ø—Ä–æ—Å: ${userQuestion}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω–µ –≤–æ–¥—ã
    const riverData = await this.getRiverLevel();

    console.log('üìä –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö:', riverData.success);
    
    if (!riverData || !riverData.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö:', riverData);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω–µ –≤–æ–¥—ã: ${riverData?.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã –≤ —Ä–µ–∫–∞—Ö. 

–¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –≤–æ–¥—ã –≤ —Ç—Ä—ë—Ö –≥–æ—Ä–æ–¥–∞—Ö: –°—Ä–æ—Å—Ç–∫–∏, –ë–∏–π—Å–∫ –∏ –ë–∞—Ä–Ω–∞—É–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
2. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
3. –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
4. –û–±—ä—è—Å–Ω–∏ —Ç—Ä–µ–Ω–¥ (—Ä–∞—Å—Ç—ë—Ç/–ø–∞–¥–∞–µ—Ç)
5. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –Ω—ë–º
6. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;

    const userPrompt = `–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ${userQuestion}

–î–ê–ù–ù–´–ï –û–ë –£–†–û–í–ù–ï –í–û–î–´:
${riverData.data}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`;

    const startTime = Date.now();

    console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ YandexGPT...`);

    const response = await fetch(
      'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
      {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          modelUri: `gpt://${process.env.YANDEX_FOLDER_ID}/${this.model}/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.3,
            maxTokens: 2000,
          },
          messages: [
            {
              role: 'system',
              text: systemPrompt,
            },
            {
              role: 'user',
              text: userPrompt,
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Yandex API error: ${error}`);
    }

    const result = await response.json();
    const analysis = result.result.alternatives[0].message.text;

    const endTime = Date.now();
    const responseTime = (endTime - startTime) / 1000;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${responseTime.toFixed(2)}—Å`);
    console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${result.result.usage.totalTokens}`);
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω`);

    return {
      answer: analysis,
      rawData: riverData.data,
      usage: {
        prompt_tokens: result.result.usage.inputTextTokens,
        completion_tokens: result.result.usage.completionTokens,
        total_tokens: result.result.usage.totalTokens,
      },
      responseTime,
      model: this.model,
      timestamp: riverData.timestamp,
      dataFetched: true,
    };
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP
   */
  async close() {
    if (this.mcpClient) {
      await this.mcpClient.close();
      this.mcpClient = null;
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }
}

