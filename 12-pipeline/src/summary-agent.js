import OpenAI from 'openai';

export class SummaryAgent {
  constructor(apiKey) {
    this.openai = new OpenAI({ apiKey });
    // –î–ª—è gpt-4o-mini –∫–æ–Ω—Ç–µ–∫—Å—Ç 128k —Ç–æ–∫–µ–Ω–æ–≤
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: 6000 —Ç–æ–∫–µ–Ω–æ–≤ (~18000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
    this.maxChunkTokens = 6000;
    this.charsPerToken = 3; // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
  }

  estimateTokens(text) {
    return Math.ceil(text.length / this.charsPerToken);
  }

  splitTextIntoChunks(text) {
    const maxChunkSize = this.maxChunkTokens * this.charsPerToken;
    
    if (this.estimateTokens(text) <= this.maxChunkTokens) {
      return [text];
    }

    const chunks = [];
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    const paragraphs = text.split(/\n\n+/);
    
    let currentChunk = '';
    
    for (const paragraph of paragraphs) {
      const testChunk = currentChunk + (currentChunk ? '\n\n' : '') + paragraph;
      
      if (testChunk.length > maxChunkSize && currentChunk) {
        // –¢–µ–∫—É—â–∏–π —á–∞–Ω–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        chunks.push(currentChunk.trim());
        currentChunk = paragraph;
      } else {
        currentChunk = testChunk;
      }
    }
    
    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }

    // –ï—Å–ª–∏ –∞–±–∑–∞—Ü—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    const finalChunks = [];
    for (const chunk of chunks) {
      if (chunk.length > maxChunkSize) {
        const sentences = chunk.match(/[^.!?]+[.!?]+/g) || [chunk];
        let sentenceChunk = '';
        
        for (const sentence of sentences) {
          const testSentence = sentenceChunk + sentence;
          
          if (testSentence.length > maxChunkSize && sentenceChunk) {
            finalChunks.push(sentenceChunk.trim());
            sentenceChunk = sentence;
          } else {
            sentenceChunk = testSentence;
          }
        }
        
        if (sentenceChunk.trim()) {
          finalChunks.push(sentenceChunk.trim());
        }
      } else {
        finalChunks.push(chunk);
      }
    }
    
    return finalChunks;
  }

  async summarizeChunk(text, isRecursive = false) {
    const systemPrompt = isRecursive
      ? '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–æ–≤. –û–±—ä–µ–¥–∏–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –≤ –µ–¥–∏–Ω–æ–µ —Å–≤—è–∑–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã.'
      : '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤—ã–¥–µ–ª—è—è –≥–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏.';

    const completion = await this.openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: text
        }
      ],
      temperature: 0.3,
    });

    return completion.choices[0].message.content;
  }

  async summarize(text, title = '', sourceUrl = '') {
    console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞...`);
    const tokens = this.estimateTokens(text);
    console.log(`–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤ (~${tokens} —Ç–æ–∫–µ–Ω–æ–≤)`);

    let summaries = [];
    let level = 1;
    let currentText = text;

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    while (true) {
      const chunks = this.splitTextIntoChunks(currentText);
      console.log(`\nüîÑ –£—Ä–æ–≤–µ–Ω—å ${level}: —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π`);

      if (chunks.length === 1) {
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        console.log(`‚ú® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ...`);
        const finalSummary = await this.summarizeChunk(chunks[0], level > 1);
        summaries = [finalSummary];
        break;
      }

      // –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
      const chunkSummaries = [];
      for (let i = 0; i < chunks.length; i++) {
        console.log(`  –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.length}...`);
        const summary = await this.summarizeChunk(chunks[i], level > 1);
        chunkSummaries.push(summary);
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      currentText = chunkSummaries.join('\n\n');
      summaries = chunkSummaries;
      level++;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ markdown
    const markdown = this.formatMarkdown(title, summaries[0], sourceUrl);
    console.log(`\n‚úÖ –†–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ!`);
    
    return markdown;
  }

  formatMarkdown(title, summary, sourceUrl) {
    let md = '';
    
    if (title) {
      md += `# ${title}\n\n`;
    }
    
    md += `## –†–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏\n\n`;
    md += summary;
    
    if (sourceUrl) {
      md += `\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫\n\n`;
      md += `[–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è](${sourceUrl})`;
    }
    
    return md;
  }
}

