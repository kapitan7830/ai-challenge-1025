import 'dotenv/config';
import { HabrScraper } from './habr-scraper.js';
import { SummaryAgent } from './summary-agent.js';
import { GitHubStorage } from './github-storage.js';
import { ArticleDatabase } from './database.js';

async function main() {
  const apiKey = process.env.OPENAI_API_KEY;
  const githubToken = process.env.GITHUB_TOKEN;
  const githubOwner = process.env.GITHUB_OWNER;
  const githubRepo = process.env.GITHUB_REPO;
  const githubBranch = process.env.GITHUB_BRANCH || 'main';
  const githubFolder = process.env.GITHUB_FILE_PATH || 'articles';

  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const scraper = new HabrScraper();
  const summaryAgent = new SummaryAgent(apiKey);
  const db = new ArticleDatabase();

  let github = null;
  if (githubToken && githubOwner && githubRepo) {
    github = new GitHubStorage(githubToken, githubOwner, githubRepo, githubBranch);
    console.log('‚úÖ GitHub —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ\n');
  } else {
    console.log('‚ö†Ô∏è  GitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Å—Ç–∞—Ç—å–∏ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –≤ –ë–î)\n');
  }

  console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–µ–π–ø–µ—Ä Habr...\n');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
  const links = await scraper.scrapeArticleLinks();
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
  const newLinks = db.getNewArticles(links);
  const existingCount = links.length - newLinks.length;

  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`  –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${links.length}`);
  console.log(`  –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${existingCount}`);
  console.log(`  –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: ${newLinks.length}\n`);

  if (newLinks.length === 0) {
    console.log('‚ú® –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
    db.close();
    return;
  }

  console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏...\n');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é (–¥–ª—è –¥–µ–º–æ)
  for (let i = 0; i < Math.min(1, newLinks.length); i++) {
    const link = newLinks[i];
    console.log(`\n${'='.repeat(80)}`);
    console.log(`–°—Ç–∞—Ç—å—è ${i + 1}/${newLinks.length}: ${link}`);
    console.log('='.repeat(80));

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—å—é
      const article = await scraper.scrapeArticle(link);
      console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}`);

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ
      const summary = await summaryAgent.summarize(article.content, article.title, link);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
      let githubUrl = null;
      if (github) {
        githubUrl = await github.saveArticle(article.title, summary, githubFolder);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      db.addArticle(link, githubUrl, article.title);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

      console.log(`\nüìù –†–ï–ó–Æ–ú–ï:\n`);
      console.log(summary);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: ${error.message}`);
    }
  }

  console.log(`\n\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const allArticles = db.getAllArticles();
  console.log(`\nüìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: ${allArticles.length}`);
  
  db.close();
}

main().catch(console.error);

