import OpenAI from 'openai';
import dotenv from 'dotenv';
import { TokenCounter } from '../utils/TokenCounter.js';
import { retryHandler } from '../utils/RetryHandler.js';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö
 */
export class CharacterAnalyzerAgent {
  constructor() {
    this.name = '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π';
    this.model = 'gpt-4o-mini'; // –î–µ—à–µ–≤–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
  }

  /**
   * –ò–∑–≤–ª–µ—á—å –¥–æ—Å—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞
   * @param {string} text - –§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞
   * @param {number} chunkIndex - –ù–æ–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
   * @returns {Promise<Object>} - –î–æ—Å—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
   */
  async extractDossiers(text, chunkIndex) {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–≤–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Å—å–µ –Ω–∞ –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–í–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "characters" - –º–∞—Å—Å–∏–≤ –¥–æ—Å—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:
{
  "characters": [
    {
      "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
      "description": "–ö—Ä–∞—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ: –∫—Ç–æ –æ–Ω, –µ–≥–æ —Ä–æ–ª—å –≤ —Å—é–∂–µ—Ç–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ",
      "relationships": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ",
      "plot_impact": "–ö–∞–∫ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ"
    }
  ]
}

–í–ê–ñ–ù–û:
- –ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –∫—Ä–∞—Ç–∫–æ–µ –¥–æ—Å—å–µ —Ä–∞–∑–≤–µ–¥–∫–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –∏ —Å–ø–∏—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏
- –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ - —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ç–æ–ª—å–∫–æ —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç - –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–π –¥–æ—Å—å–µ
- –ï—Å–ª–∏ –≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ –ù–ï–¢ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≤–µ—Ä–Ω–∏ {"characters": []}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç.`;

    const startTime = Date.now();
    const estimatedTokens = TokenCounter.estimate(systemPrompt + text);

    console.log(`\nüé≠ ${this.name} –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ—Å—å–µ –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ${chunkIndex + 1}...`);
    console.log(`üìä –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${estimatedTokens}`);

    try {
      const response = await retryHandler.executeOpenAIRequest(
        () => openai.chat.completions.create({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: systemPrompt,
            },
            {
              role: 'user',
              content: text,
            },
          ],
          max_tokens: 4000,
          temperature: 0.3,
          response_format: { type: "json_object" },
        }),
        this.model,
        estimatedTokens
      );

      const content = response.choices[0].message.content;
      const endTime = Date.now();
      const responseTime = (endTime - startTime) / 1000;

      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${responseTime.toFixed(2)}—Å`);
      console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${response.usage.total_tokens}`);

      // –ü–∞—Ä—Å–∏–º JSON
      let dossiers = [];
      try {
        const parsed = JSON.parse(content);
        dossiers = parsed.characters || [];
        
        if (!Array.isArray(dossiers)) {
          console.warn('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—ã—Ç–∞—é—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ...');
          dossiers = [];
        }
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
        console.error('–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:', content);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        dossiers = [];
      }

      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–æ—Å—å–µ: ${dossiers.length} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π`);
      if (dossiers.length > 0) {
        dossiers.forEach((d, i) => {
          console.log(`\n   ${i + 1}. ${d.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂'}`);
          console.log(`      ${d.description?.substring(0, 100)}...`);
        });
      }

      return {
        dossiers,
        chunkIndex,
        usage: response.usage,
        responseTime,
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ extractDossiers –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ${chunkIndex + 1}:`, error.message);
      throw error;
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–æ—Å—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
   * @param {Array} allDossiers - –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –¥–æ—Å—å–µ
   * @returns {Promise<Object>} - –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  async mergeDossiers(allDossiers) {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–≤–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ—Å—å–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ—Å—å–µ.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–ø–∏—à–∏:
1. –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
2. –ü–æ–ª–Ω–æ–µ –¥–æ—Å—å–µ - –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ (2-4 –∞–±–∑–∞—Ü–∞) –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
   - –ö—Ç–æ –æ–Ω –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
   - –ï–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
   - –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
   - –ö–∞–∫ –æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞
   - –í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

–í–ê–ñ–ù–û:
- –ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–≤–µ–¥—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, —Å–ø–∏—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏, –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º
- –û–±—ä–µ–¥–∏–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
- –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–ø–æ–º—è–Ω—É—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö - –æ–±—ä–µ–¥–∏–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
[–ò–ú–Ø –ü–ï–†–°–û–ù–ê–ñ–ê]

[–î–æ—Å—å–µ - —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç]

---`;

    const dossiersText = JSON.stringify(allDossiers, null, 2);
    
    const startTime = Date.now();

    try {
      const estimatedTokens = TokenCounter.estimate(systemPrompt + dossiersText);
      
      const response = await retryHandler.executeOpenAIRequest(
        () => openai.chat.completions.create({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: systemPrompt,
            },
            {
              role: 'user',
              content: dossiersText,
            },
          ],
          max_tokens: 6000,
          temperature: 0.4,
        }),
        this.model,
        estimatedTokens
      );

      const analysis = response.choices[0].message.content;
      const endTime = Date.now();
      const responseTime = (endTime - startTime) / 1000;

      const noCharactersFound = !analysis || analysis.trim().length < 50;

      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: ${responseTime.toFixed(2)}—Å`);
      console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${response.usage.total_tokens}`);

      return {
        analysis,
        noCharactersFound,
        usage: response.usage,
        responseTime,
        model: this.model,
      };
    } catch (error) {
      throw new Error(`OpenAI API error in merging: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @param {string} text - –¢–µ–∫—Å—Ç —Ä–∞—Å—Å–∫–∞–∑–∞
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  async analyzeCharacters(text) {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–≤–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –¥–æ—Å—å–µ (2-3 –∞–±–∑–∞—Ü–∞):
- –ö—Ç–æ –æ–Ω –∏ –µ–≥–æ —Ä–æ–ª—å
- –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
- –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—é–∂–µ—Ç

–ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤.

–ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å: "–ü–ï–†–°–û–ù–ê–ñ–ò_–ù–ï_–ù–ê–ô–î–ï–ù–´"`;

    const startTime = Date.now();
    const inputTokens = TokenCounter.estimate(systemPrompt + text);

    console.log(`\nüé≠ ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑...`);
    console.log(`üìä –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${inputTokens}`);

    try {
      const estimatedTokens = TokenCounter.estimate(systemPrompt + text);
      
      const response = await retryHandler.executeOpenAIRequest(
        () => openai.chat.completions.create({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: systemPrompt,
            },
            {
              role: 'user',
              content: text,
            },
          ],
          max_tokens: 4000,
          temperature: 0.4,
        }),
        this.model,
        estimatedTokens
      );

      const analysis = response.choices[0].message.content;
      const endTime = Date.now();
      const responseTime = (endTime - startTime) / 1000;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
      const noCharactersFound = analysis.includes('–ü–ï–†–°–û–ù–ê–ñ–ò_–ù–ï_–ù–ê–ô–î–ï–ù–´');

      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${responseTime.toFixed(2)}—Å`);
      console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${response.usage.total_tokens}`);
      console.log(`‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ${noCharactersFound ? '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–Ω–∞–π–¥–µ–Ω—ã'}`);

      return {
        analysis,
        noCharactersFound,
        usage: response.usage,
        responseTime,
        model: this.model,
      };
    } catch (error) {
      throw new Error(`OpenAI API error: ${error.message}`);
    }
  }
}

