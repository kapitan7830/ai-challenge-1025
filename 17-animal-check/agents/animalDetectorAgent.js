import OpenAI from 'openai';
import { TextChunker } from '../utils/textChunker.js';
import { logger } from '../utils/logger.js';

export class AnimalDetectorAgent {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    this.model = 'gpt-4o-mini';
    this.chunker = new TextChunker();
  }
  
  async findAnimals(text) {
    const chunks = this.chunker.splitText(text);
    
    if (chunks.length > 1) {
      logger.info(`üì¶ –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    }
    
    const allAnimals = [];
    
    for (let i = 0; i < chunks.length; i++) {
      logger.info(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.length}...`);
      
      const animals = await this.analyzeChunk(chunks[i], i + 1);
      
      if (animals && animals.length > 0) {
        allAnimals.push(...animals);
        logger.info(`   –ù–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: ${animals.length}`);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueAnimals = this.mergeAnimals(allAnimals);
    
    return uniqueAnimals;
  }
  
  async analyzeChunk(text, chunkNumber) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.

–ü–æ–¥ "–∂–∏–≤–æ—Ç–Ω—ã–º–∏" –ø–æ–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –∂–∏–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ –∫—Ä–æ–º–µ —á–µ–ª–æ–≤–µ–∫–∞: –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, –ø—Ç–∏—Ü—ã, —Ä—ã–±—ã, –Ω–∞—Å–µ–∫–æ–º—ã–µ, –ø–∞—É–∫–∏, –º–æ–ª–ª—é—Å–∫–∏, —á–µ—Ä–≤–∏, —Ä–µ–ø—Ç–∏–ª–∏–∏, –∞–º—Ñ–∏–±–∏–∏ –∏ —Ç.–¥.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —É–∫–∞–∂–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ",
    "context": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
  }
]

–ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: []

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
${text}`;

    try {
      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        response_format: { type: 'json_object' }
      });
      
      const content = response.choices[0].message.content;
      
      // –ü–∞—Ä—Å–∏–º JSON
      let parsed;
      try {
        parsed = JSON.parse(content);
      } catch (e) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —á–∞—Å—Ç–∏ ${chunkNumber}: ${e.message}`);
        return [];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      if (Array.isArray(parsed)) {
        return parsed;
      } else if (parsed.animals && Array.isArray(parsed.animals)) {
        return parsed.animals;
      } else if (parsed.result && Array.isArray(parsed.result)) {
        return parsed.result;
      }
      
      return [];
      
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏ ${chunkNumber}: ${error.message}`);
      throw error;
    }
  }
  
  mergeAnimals(animals) {
    const merged = new Map();
    
    for (const animal of animals) {
      const name = animal.name.toLowerCase().trim();
      
      if (merged.has(name)) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        const existing = merged.get(name);
        existing.context += ' ' + animal.context;
      } else {
        merged.set(name, {
          name: animal.name,
          context: animal.context
        });
      }
    }
    
    const result = Array.from(merged.values());
    
    if (animals.length > result.length) {
      logger.info(`üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: ${animals.length} ‚Üí ${result.length}`);
    }
    
    return result;
  }
}

