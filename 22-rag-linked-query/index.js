import { readFileSync } from 'fs';
import { resolve } from 'path';
import dotenv from 'dotenv';
import { logger } from './utils/logger.js';
import { SemanticChunker } from './utils/chunker.js';
import { EmbeddingsService } from './services/embeddings.js';
import { VectorStore } from './services/vectorStore.js';

dotenv.config();

async function main() {
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  const filePath = process.argv[2];

  if (!filePath) {
    logger.error('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
    console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm start <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>');
    console.log('–ü—Ä–∏–º–µ—Ä: npm start ./document.md');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    logger.info('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: OPENAI_API_KEY=your_key_here');
    process.exit(1);
  }

  logger.separator();
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
  logger.separator();

  try {
    // –®–ê–ì 1: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    logger.step(1, 5, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞');
    const absolutePath = resolve(filePath);
    const filename = absolutePath.split('/').pop();
    logger.info(`–ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${filename}`);

    let content = readFileSync(absolutePath, 'utf-8');
    logger.success(`–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ HTML —Ñ–∞–π–ª, –≤—ã—Ä–µ–∑–∞–µ–º —Ç–µ–≥–∏
    if (filename.endsWith('.html') || filename.endsWith('.htm')) {
      logger.info('–û–±–Ω–∞—Ä—É–∂–µ–Ω HTML —Ñ–∞–π–ª, —É–¥–∞–ª—è—é —Ç–µ–≥–∏...');
      content = content.replace(/<[^>]*>/g, ' ') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
                       .replace(/&nbsp;/g, ' ')   // –ó–∞–º–µ–Ω—è–µ–º &nbsp; –Ω–∞ –ø—Ä–æ–±–µ–ª
                       .replace(/&lt;/g, '<')     // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
                       .replace(/&gt;/g, '>')
                       .replace(/&amp;/g, '&')
                       .replace(/&quot;/g, '"')
                       .replace(/&#39;/g, "'")
                       .replace(/\s+/g, ' ')      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
                       .trim();
      logger.success(`HTML —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã, –æ—Å—Ç–∞–ª–æ—Å—å ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    logger.separator();

    // –®–ê–ì 2: –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏
    logger.step(2, 5, '–†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏');
    const chunker = new SemanticChunker(2000, 15);
    const chunks = chunker.chunk(content);
    logger.separator();

    // –®–ê–ì 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    logger.step(3, 5, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ OpenAI');
    const embeddingsService = new EmbeddingsService(apiKey);
    const texts = chunks.map(chunk => chunk.text);
    const embeddings = await embeddingsService.getEmbeddings(texts);
    logger.separator();

    // –®–ê–ì 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    logger.step(4, 5, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (sqlite-vec)');
    const vectorStore = new VectorStore();
    vectorStore.initialize();
    logger.separator();

    // –®–ê–ì 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.step(5, 5, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É');
    const documentId = vectorStore.saveDocument(filename, chunks, embeddings);
    logger.separator();

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.success('‚ú® –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    logger.separator();
    
    const stats = vectorStore.getStats();
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', stats);
    logger.info(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: ${filename} (ID: ${documentId})`);
    
    logger.separator();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    vectorStore.close();
  } catch (error) {
    logger.separator();
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞:', error);
    process.exit(1);
  }
}

main();

