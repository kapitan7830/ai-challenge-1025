/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É:
 * 1 —Ç–æ–∫–µ–Ω ‚âà 2.5 —Å–∏–º–≤–æ–ª–∞ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —á–µ–º –ª–∞—Ç–∏–Ω–∏—Ü–∞)
 */
export class TokenCounter {
  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
   * @returns {number} - –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
   */
  static estimate(text) {
    if (!text) return 0;
    
    // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ~2.5 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const CHARS_PER_TOKEN = 2.5;
    
    return Math.ceil(text.length / CHARS_PER_TOKEN);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ª–∏–º–∏—Ç
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @param {number} maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
   * @returns {boolean}
   */
  static exceedsLimit(text, maxTokens) {
    return this.estimate(text) > maxTokens;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
   * @param {Object} usage - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
   * @returns {string}
   */
  static formatUsage(usage) {
    const { prompt_tokens, completion_tokens, total_tokens } = usage;
    return `üìä –í—Ö–æ–¥: ${prompt_tokens} | –í—ã—Ö–æ–¥: ${completion_tokens} | –í—Å–µ–≥–æ: ${total_tokens}`;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
   * YandexGPT-lite: ~0.3‚ÇΩ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
   */
  static estimateCost(tokens) {
    const costPerThousand = 0.3; // —Ä—É–±–ª–∏
    return ((tokens / 1000) * costPerThousand).toFixed(4);
  }
}

