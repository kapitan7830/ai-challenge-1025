import cron from 'node-cron';
import { Telegraf } from 'telegraf';
import fetch from 'node-fetch';
import { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, CRON_SCHEDULE, API_URL, OPENAI_API_KEY } from '../constants.js';

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

function log(message, data = null) {
  const timestamp = new Date().toISOString();
  console.error(`[${timestamp}] [CRON] ${message}`, data || '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function getTodayTasks() {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const timestamp = today.getTime();
    
    const response = await fetch(`${API_URL}/tasks?day=${timestamp}`);
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á');
    }
    
    const data = await response.json();
    return data.tasks;
  } catch (error) {
    console.error('[CRON] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI
async function generateSummary(tasks) {
  if (tasks.length === 0) {
    return 'üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.';
  }
  
  try {
    const now = Date.now();
    const tasksText = tasks.map((task, index) => {
      const date = new Date(task.date);
      const dateStr = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
      
      let statusEmoji;
      if (task.completed_at) {
        statusEmoji = '‚úÖ';
      } else if (task.date < now) {
        statusEmoji = 'üî¥';
      } else {
        statusEmoji = '‚è≥';
      }
      
      return `${index + 1}. ${statusEmoji} ${task.name} - ${dateStr}${task.description ? `\n   ${task.description}` : ''}`;
    }).join('\n\n');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.'
          },
          {
            role: 'user',
            content: `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n${tasksText}\n\n–í–∫–ª—é—á–∏:\n- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á\n- –°–∫–æ–ª—å–∫–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ/–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç\n- –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–ª`
          }
        ],
        temperature: 0.7,
        max_tokens: 500,
      }),
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ OpenAI API');
    }
    
    const data = await response.json();
    const summary = data.choices[0].message.content;
    
    return `üìã –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏\n\n${summary}\n\n${tasksText}`;
  } catch (error) {
    console.error('[CRON] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏:', error);
    // –ï—Å–ª–∏ OpenAI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–µ—Ä–Ω–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    const now = Date.now();
    const completed = tasks.filter(t => t.completed_at).length;
    const overdue = tasks.filter(t => !t.completed_at && t.date < now).length;
    const upcoming = tasks.filter(t => !t.completed_at && t.date >= now).length;
    
    return `üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${tasks.length})\n\n` +
           `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed}\n` +
           `üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${overdue}\n` +
           `‚è≥ –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç: ${upcoming}`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏
async function sendDailySummary() {
  log('‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏...');
  
  if (!TELEGRAM_CHAT_ID) {
    log('‚ùå TELEGRAM_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
    return;
  }
  
  try {
    const tasks = await getTodayTasks();
    log(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${tasks.length}`);
    
    const summary = await generateSummary(tasks);
    log(`üìù –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞...`);
    
    await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, summary);
    log('‚úÖ –°–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏
export function startDailySummaryCron() {
  if (!TELEGRAM_CHAT_ID) {
    log('‚ö†Ô∏è  TELEGRAM_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
    log('–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHAT_ID –≤ .env –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.');
    return null;
  }

  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const now = new Date();
  
  log(`‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${CRON_SCHEDULE}`);
  log(`üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
  log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toLocaleString('ru-RU', { timeZone: timezone })}`);
  log(`üì® –°–∞–º–º–∞—Ä–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram`);
  
  const task = cron.schedule(CRON_SCHEDULE, () => {
    log(`‚è∞ –ó–∞–ø—É—Å–∫ –∫—Ä–æ–Ω–∞ –≤ ${new Date().toLocaleString('ru-RU')}`);
    sendDailySummary();
  }, {
    timezone: timezone
  });
  
  log('‚úÖ –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –∂–¥—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  
  return task;
}

// –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
export async function sendSummaryNow() {
  await sendDailySummary();
}

