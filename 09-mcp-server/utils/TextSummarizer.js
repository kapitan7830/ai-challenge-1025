import dotenv from 'dotenv';
import { TokenCounter } from './TokenCounter.js';

dotenv.config();

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é, –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç
 */
export class TextSummarizer {
  constructor() {
    this.model = 'yandexgpt-lite';
    this.chunkSize = 2000; // —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ–¥–∏–Ω —á–∞–Ω–∫
    this.maxTokensPerRequest = 7000; // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è yandexgpt-lite
  }

  /**
   * –†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {number} maxTokensPerChunk - –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
   * @returns {string[]} - –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
   */
  splitIntoChunks(text, maxTokensPerChunk = this.chunkSize) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
    
    const chunks = [];
    let currentChunk = '';
    
    for (const sentence of sentences) {
      const testChunk = currentChunk + sentence;
      const tokens = TokenCounter.estimate(testChunk);
      
      if (tokens > maxTokensPerChunk && currentChunk) {
        // –¢–µ–∫—É—â–∏–π —á–∞–Ω–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        chunks.push(currentChunk.trim());
        currentChunk = sentence;
      } else {
        currentChunk = testChunk;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }
    
    return chunks;
  }

  /**
   * –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞
   * @param {string} chunk - –ß–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
   * @param {number} chunkIndex - –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å summary –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  async summarizeChunk(chunk, chunkIndex) {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤:
1. –í—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
2. –ò—Ö –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
3. –í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å—é–∂–µ—Ç–∞

–°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 3 —Ä–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö.`;

    const startTime = Date.now();

    const response = await fetch(
      'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
      {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          modelUri: `gpt://${process.env.YANDEX_FOLDER_ID}/${this.model}/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.3, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            maxTokens: 1500,
          },
          messages: [
            {
              role: 'system',
              text: systemPrompt,
            },
            {
              role: 'user',
              text: `–§—Ä–∞–≥–º–µ–Ω—Ç ${chunkIndex + 1}:\n\n${chunk}`,
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Yandex API error on chunk ${chunkIndex + 1}: ${error}`);
    }

    const result = await response.json();
    const summary = result.result.alternatives[0].message.text;

    const endTime = Date.now();
    const responseTime = (endTime - startTime) / 1000;

    return {
      summary,
      chunkIndex,
      originalTokens: TokenCounter.estimate(chunk),
      summaryTokens: TokenCounter.estimate(summary),
      usage: {
        prompt_tokens: result.result.usage.inputTextTokens,
        completion_tokens: result.result.usage.completionTokens,
        total_tokens: result.result.usage.totalTokens,
      },
      responseTime,
    };
  }

  /**
   * –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Ç–æ–≥–æ–≤—ã–º summary –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  async summarize(text) {
    const totalStartTime = Date.now();
    const originalTokens = TokenCounter.estimate(text);

    console.log(`\nüîç –ù–∞—á–∏–Ω–∞—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞:`);
    console.log(`üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üìä –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${originalTokens}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    if (originalTokens <= this.maxTokensPerRequest - 1000) {
      console.log(`‚úÖ –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      return {
        summary: text,
        originalTokens,
        summaryTokens: originalTokens,
        chunks: [],
        totalUsage: {
          prompt_tokens: 0,
          completion_tokens: 0,
          total_tokens: 0,
        },
        totalTime: 0,
        compressionRatio: 1,
      };
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    const chunks = this.splitIntoChunks(text);
    console.log(`‚úÇÔ∏è  –†–∞–∑–±–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π`);

    // –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    const chunkResults = [];
    let totalUsage = {
      prompt_tokens: 0,
      completion_tokens: 0,
      total_tokens: 0,
    };

    for (let i = 0; i < chunks.length; i++) {
      console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Å—Ç—å ${i + 1}/${chunks.length}...`);
      const result = await this.summarizeChunk(chunks[i], i);
      chunkResults.push(result);

      totalUsage.prompt_tokens += result.usage.prompt_tokens;
      totalUsage.completion_tokens += result.usage.completion_tokens;
      totalUsage.total_tokens += result.usage.total_tokens;

      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${result.responseTime.toFixed(2)}—Å`);
      console.log(`   üìä –¢–æ–∫–µ–Ω—ã: ${result.originalTokens} ‚Üí ${result.summaryTokens}`);
      console.log(`   üìâ –°–∂–∞—Ç–∏–µ: ${((1 - result.summaryTokens / result.originalTokens) * 100).toFixed(1)}%`);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∞–º–º–∞—Ä–∏
    const combinedSummary = chunkResults
      .map((r) => `[–ß–∞—Å—Ç—å ${r.chunkIndex + 1}]\n${r.summary}`)
      .join('\n\n');

    const summaryTokens = TokenCounter.estimate(combinedSummary);
    const totalTime = (Date.now() - totalStartTime) / 1000;
    const compressionRatio = summaryTokens / originalTokens;

    console.log(`\n‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`üìä ${originalTokens} —Ç–æ–∫–µ–Ω–æ–≤ ‚Üí ${summaryTokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: ${(compressionRatio * 100).toFixed(1)}%`);
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime.toFixed(2)}—Å`);

    return {
      summary: combinedSummary,
      originalTokens,
      summaryTokens,
      chunks: chunkResults,
      totalUsage,
      totalTime,
      compressionRatio,
    };
  }
}

