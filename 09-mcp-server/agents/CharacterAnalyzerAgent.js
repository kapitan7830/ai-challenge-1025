import dotenv from 'dotenv';
import { TokenCounter } from '../utils/TokenCounter.js';

dotenv.config();

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö
 */
export class CharacterAnalyzerAgent {
  constructor() {
    this.name = '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π';
    this.model = 'yandexgpt-lite';
  }

  /**
   * –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   * @param {string} text - –¢–µ–∫—Å—Ç —Ä–∞—Å—Å–∫–∞–∑–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  async analyzeCharacters(text) {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–≤–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–∫–∞–∂–∏:
1. üë§ –ò–º—è (–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
2. üìù –ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (—Ä–æ–ª—å, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —Å—Ç–∞—Ç—É—Å)
3. üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (—Ö–∞—Ä–∞–∫—Ç–µ—Ä, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏)
4. üí´ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã (—á—Ç–æ –¥–µ–ª–∞–µ—Ç, –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üë§ [–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]
üìù [–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞]
üß† [–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç]
üí´ [–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã]

(–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ù–ï–¢ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç—å—è –∏ —Ç.–ø.), –æ—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–ü–ï–†–°–û–ù–ê–ñ–ò_–ù–ï_–ù–ê–ô–î–ï–ù–´"`;

    const startTime = Date.now();
    const inputTokens = TokenCounter.estimate(systemPrompt + text);

    console.log(`\nüé≠ ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑...`);
    console.log(`üìä –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${inputTokens}`);

    const response = await fetch(
      'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
      {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          modelUri: `gpt://${process.env.YANDEX_FOLDER_ID}/${this.model}/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.5,
            maxTokens: 2000,
          },
          messages: [
            {
              role: 'system',
              text: systemPrompt,
            },
            {
              role: 'user',
              text: text,
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Yandex API error: ${error}`);
    }

    const result = await response.json();
    const analysis = result.result.alternatives[0].message.text;

    const endTime = Date.now();
    const responseTime = (endTime - startTime) / 1000;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
    const noCharactersFound = analysis.includes('–ü–ï–†–°–û–ù–ê–ñ–ò_–ù–ï_–ù–ê–ô–î–ï–ù–´');

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${responseTime.toFixed(2)}—Å`);
    console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${result.result.usage.totalTokens}`);
    console.log(`‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ${noCharactersFound ? '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–Ω–∞–π–¥–µ–Ω—ã'}`);

    return {
      analysis,
      noCharactersFound,
      usage: {
        prompt_tokens: result.result.usage.inputTextTokens,
        completion_tokens: result.result.usage.completionTokens,
        total_tokens: result.result.usage.totalTokens,
      },
      responseTime,
      model: this.model,
    };
  }
}

