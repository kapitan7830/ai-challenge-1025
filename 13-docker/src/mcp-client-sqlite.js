#!/usr/bin/env node
import 'dotenv/config';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';

class HabrPipelineClientSQLite {
  constructor() {
    this.client = new Client(
      {
        name: 'habr-pipeline-client-sqlite',
        version: '1.0.0',
      },
      {
        capabilities: {},
      }
    );
  }

  async connect() {
    const transport = new StdioClientTransport({
      command: 'node',
      args: ['src/mcp-server-sqlite.js'],
      env: process.env, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    });

    await this.client.connect(transport);
    return transport;
  }

  async callTool(name, args = {}) {
    const result = await this.client.callTool({ name, arguments: args });
    try {
      return JSON.parse(result.content[0].text);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è ${name}:`, result.content[0].text);
      throw new Error(`Invalid JSON response: ${result.content[0].text}`);
    }
  }

  async run() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π —Å Habr (SQLite)\n');
    await this.connect();

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Habr...');
      const articlesData = await this.callTool('get_habr_articles');
      const articles = articlesData.articles;
      
      if (articlesData.limit) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${articlesData.total_found} —Å—Ç–∞—Ç–µ–π, –ª–∏–º–∏—Ç: ${articlesData.limit}, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${articlesData.count}\n`);
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${articlesData.count} —Å—Ç–∞—Ç–µ–π\n`);
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–æ–≤—ã–µ
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const checkData = await this.callTool('check_new_articles', {
        article_urls: articles,
      });
      const newArticles = checkData.new_articles;
      console.log(`‚úÖ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: ${checkData.new_count}, –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${checkData.existing_count}\n`);

      if (newArticles.length === 0) {
        console.log('‚ú® –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        process.exit(0);
      }

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
      console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ ${newArticles.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π...\n`);
      let processed = 0;

      for (const url of newArticles) {
        try {
          console.log(`\n${'='.repeat(80)}`);
          console.log(`–°—Ç–∞—Ç—å—è ${processed + 1}/${newArticles.length}: ${url}`);
          console.log('='.repeat(80));

          // 3.1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ
          const summaryData = await this.callTool('get_article_summary', {
            article_url: url,
          });
          console.log(`‚úÖ –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ: ${summaryData.title}`);

          // 3.2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
          let githubUrl = null;
          try {
            const githubData = await this.callTool('save_to_github', {
              title: summaryData.title,
              content: summaryData.summary,
            });
            githubUrl = githubData.github_url;
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ GitHub: ${githubUrl}`);
          } catch (error) {
            console.log(`‚ö†Ô∏è GitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${error.message}`);
          }

          // 3.3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
          await this.callTool('save_to_database', {
            habr_url: url,
            github_url: githubUrl,
            title: summaryData.title,
          });
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î`);

          processed++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: ${error.message}`);
        }
      }

      // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log(`\n\n${'='.repeat(80)}`);
      console.log(`\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processed}/${newArticles.length}\n`);

      const stats = await this.callTool('get_database_stats');
      console.log(`üìö –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: ${stats.total_articles}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      process.exit(0);
    }
  }
}

const client = new HabrPipelineClientSQLite();
client.run().catch(console.error);
