#!/usr/bin/env node
import 'dotenv/config';
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { HabrScraper } from './habr-scraper.js';
import { SummaryAgent } from './summary-agent.js';
import { GitHubStorage } from './github-storage.js';
import { ArticleDatabase } from './database.js';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

class HabrMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: 'habr-scraper-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.scraper = new HabrScraper();
    this.summaryAgent = null;
    this.github = null;
    this.db = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    const githubToken = process.env.GITHUB_TOKEN;
    const githubOwner = process.env.GITHUB_OWNER;
    const githubRepo = process.env.GITHUB_REPO;
    const githubBranch = process.env.GITHUB_BRANCH || 'main';

    if (githubToken && githubOwner && githubRepo) {
      this.github = new GitHubStorage(githubToken, githubOwner, githubRepo, githubBranch);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SummaryAgent
    const apiKey = process.env.OPENAI_API_KEY;
    if (apiKey) {
      this.summaryAgent = new SummaryAgent(apiKey);
    } else {
      console.error('[LOG] ‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    this.setupHandlers();
    this.server.onerror = (error) => console.error('[MCP Error]', error);
    process.on('SIGINT', async () => {
      try {
        if (this.db) {
          await this.db.close();
        }
        await this.server.close();
      } catch (error) {
        console.error('[LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error.message);
      } finally {
        process.exit(0);
      }
    });
  }

  async ensureDatabase() {
    if (!this.db) {
      this.db = new ArticleDatabase();
      await this.db.initDatabase();
    }
  }

  setupHandlers() {
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'start_postgres_container',
          description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ docker-compose',
          inputSchema: {
            type: 'object',
            properties: {},
          },
        },
        {
          name: 'stop_postgres_container',
          description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å volume',
          inputSchema: {
            type: 'object',
            properties: {},
          },
        },
        {
          name: 'get_habr_articles',
          description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Habr',
          inputSchema: {
            type: 'object',
            properties: {},
          },
        },
        {
          name: 'check_new_articles',
          description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)',
          inputSchema: {
            type: 'object',
            properties: {
              article_urls: {
                type: 'array',
                items: { type: 'string' },
                description: '–ú–∞—Å—Å–∏–≤ URL —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
              },
            },
            required: ['article_urls'],
          },
        },
        {
          name: 'get_article_summary',
          description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏ –ø–æ URL. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —Å Habr –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏.',
          inputSchema: {
            type: 'object',
            properties: {
              article_url: {
                type: 'string',
                description: 'URL —Å—Ç–∞—Ç—å–∏ –Ω–∞ Habr',
              },
            },
            required: ['article_url'],
          },
        },
        {
          name: 'save_to_github',
          description: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å markdown –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ GitHub',
          inputSchema: {
            type: 'object',
            properties: {
              title: {
                type: 'string',
                description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞',
              },
              content: {
                type: 'string',
                description: 'Markdown –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
              },
              folder: {
                type: 'string',
                description: '–ü–∞–ø–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é articles)',
              },
            },
            required: ['title', 'content'],
          },
        },
        {
          name: 'save_to_database',
          description: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
          inputSchema: {
            type: 'object',
            properties: {
              habr_url: {
                type: 'string',
                description: 'URL —Å—Ç–∞—Ç—å–∏ –Ω–∞ Habr',
              },
              github_url: {
                type: 'string',
                description: 'URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ GitHub',
              },
              title: {
                type: 'string',
                description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏',
              },
            },
            required: ['habr_url', 'title'],
          },
        },
        {
          name: 'get_database_stats',
          description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—å—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          inputSchema: {
            type: 'object',
            properties: {},
          },
        },
      ],
    }));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      try {
        const { name, arguments: args } = request.params;

        switch (name) {
          case 'start_postgres_container':
            return await this.startPostgresContainer();
          case 'stop_postgres_container':
            return await this.stopPostgresContainer();
          case 'get_habr_articles':
            return await this.getHabrArticles();
          case 'check_new_articles':
            return await this.checkNewArticles(args.article_urls);
          case 'get_article_summary':
            return await this.getArticleSummary(args.article_url);
          case 'save_to_github':
            return await this.saveToGithub(args.title, args.content, args.folder);
          case 'save_to_database':
            return await this.saveToDatabase(args.habr_url, args.github_url, args.title);
          case 'get_database_stats':
            return await this.getDatabaseStats();
          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify({
                success: false,
                error: error.message,
              }),
            },
          ],
          isError: true,
        };
      }
    });
  }

  async startPostgresContainer() {
    try {
      console.error('[LOG] üê≥ –ó–∞–ø—É—Å–∫ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
      await execAsync('docker-compose up -d');

      console.error('[LOG] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...');
      let ready = false;
      let attempts = 0;
      const maxAttempts = 30;

      while (!ready && attempts < maxAttempts) {
        try {
          const { stdout } = await execAsync('docker-compose ps --format json');
          const containers = JSON.parse(stdout);
          const postgres = Array.isArray(containers)
            ? containers.find((c) => c.Service === 'postgres')
            : containers;

          if (postgres && postgres.Health === 'healthy') {
            ready = true;
          } else {
            await new Promise((resolve) => setTimeout(resolve, 1000));
            attempts++;
          }
        } catch (error) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
          attempts++;
        }
      }

      if (!ready) {
        throw new Error('PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è');
      }

      console.error('[LOG] ‚úÖ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤');

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(
              {
                success: true,
                message: 'PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤',
                container: 'habr-scraper-postgres',
                port: 5432,
              },
              null,
              2
            ),
          },
        ],
      };
    } catch (error) {
      console.error('[LOG] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', error.message);
      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(
              {
                success: false,
                error: error.message,
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω.',
              },
              null,
              2
            ),
          },
        ],
        isError: true,
      };
    }
  }

  async stopPostgresContainer() {
    try {
      console.error('[LOG] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
      await execAsync('docker-compose down');
      console.error('[LOG] ‚úÖ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω');

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(
              {
                success: true,
                message: 'PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, volume —É–¥–∞–ª–µ–Ω',
              },
              null,
              2
            ),
          },
        ],
      };
    } catch (error) {
      console.error('[LOG] ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', error.message);
      throw error;
    }
  }

  async getHabrArticles() {
    console.error('[LOG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Habr...');
    const links = await this.scraper.scrapeArticleLinks();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    const limit = process.env.ARTICLES_LIMIT ? parseInt(process.env.ARTICLES_LIMIT) : null;
    const limitedLinks = limit ? links.slice(0, limit) : links;
    
    console.error(`[LOG] –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${links.length}`);
    if (limit) {
      console.error(`[LOG] –ü—Ä–∏–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç: ${limit}, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${limitedLinks.length}`);
    }

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              count: limitedLinks.length,
              total_found: links.length,
              limit: limit,
              articles: limitedLinks,
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async checkNewArticles(articleUrls) {
    console.error('[LOG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await this.ensureDatabase();
    const newArticles = await this.db.getNewArticles(articleUrls);
    const existingCount = articleUrls.length - newArticles.length;
    console.error(`[LOG] –í—Å–µ–≥–æ: ${articleUrls.length}, –ù–æ–≤—ã—Ö: ${newArticles.length}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${existingCount}`);

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              total: articleUrls.length,
              new_articles: newArticles,
              new_count: newArticles.length,
              existing_count: existingCount,
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async getArticleSummary(articleUrl) {
    console.error(`[LOG] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏: ${articleUrl}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—å—é
    const article = await this.scraper.scrapeArticle(articleUrl);
    console.error(`[LOG] –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}`);
    console.error(`[LOG] –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${article.content.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    let summary;
    if (this.summaryAgent) {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ OpenAI
      summary = await this.summaryAgent.summarize(article.content, article.title, articleUrl);
      console.error(`[LOG] –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ OpenAI (${summary.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    } else {
      // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ OpenAI - –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
      summary = `# ${article.title}\n\n${article.content.substring(0, 500)}...\n\n*–ò—Å—Ç–æ—á–Ω–∏–∫: ${articleUrl}*`;
      console.error(`[LOG] –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ (${summary.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    }

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              url: articleUrl,
              title: article.title,
              summary: summary,
              original_length: article.content.length,
              summary_length: summary.length,
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async saveToGithub(title, content, folder = 'articles') {
    console.error(`[LOG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ GitHub: ${title}`);
    if (!this.github) {
      throw new Error('GitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ GITHUB_TOKEN, GITHUB_OWNER –∏ GITHUB_REPO');
    }

    const githubUrl = await this.github.saveArticle(title, content, folder);
    console.error(`[LOG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${githubUrl}`);

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              github_url: githubUrl,
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async saveToDatabase(habrUrl, githubUrl, title) {
    console.error(`[LOG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ${title}`);
    await this.ensureDatabase();
    const id = await this.db.addArticle(habrUrl, githubUrl, title);
    console.error(`[LOG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${id}`);

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              id: id,
              habr_url: habrUrl,
              github_url: githubUrl,
              title: title,
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async getDatabaseStats() {
    console.error('[LOG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î...');
    await this.ensureDatabase();
    const allArticles = await this.db.getAllArticles();
    console.error(`[LOG] –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –ë–î: ${allArticles.length}`);

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(
            {
              success: true,
              total_articles: allArticles.length,
              articles: allArticles.slice(0, 10), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–∞—Ç–µ–π
            },
            null,
            2
          ),
        },
      ],
    };
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('Habr Scraper MCP Server –∑–∞–ø—É—â–µ–Ω');
  }
}

const server = new HabrMCPServer();
server.run().catch(console.error);
