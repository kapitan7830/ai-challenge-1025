import { Telegraf } from 'telegraf';
import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Store user sessions
const userSessions = new Map();

const INTRO_MESSAGE = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–°—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä!

–Ø –ø–æ–º–æ–≥–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—ã, –∑–∞–¥–∞–≤–∞—è —Ü–µ–ª–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.

–ö–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`;

function initializeSession(userId) {
  userSessions.set(userId, {
    state: 'waiting_for_theme',
    theme: null,
    conversationHistory: [],
    currentQuestionIndex: 0,
    botMessageIds: [],
  });
}

async function generateNextQuestion(conversationHistory, questionNumber) {
  const messages = [
    {
      role: 'system',
      content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –ó–∞–¥–∞–≤–∞–π –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏. –û–ø–∏—Ä–∞–π—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã. –û–±—â–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
    },
    ...conversationHistory,
    {
      role: 'user',
      content: `–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ 5. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ.`,
    },
  ];

  const completion = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages,
  });

  return completion.choices[0].message.content.trim();
}

async function generateSummary(conversationHistory, theme) {
  const messages = [
    {
      role: 'system',
      content: '–¢—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ–∑–¥–∞–π —á–µ—Ç–∫–æ–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–µ –¢–ó, –æ–±—ä—è—Å–Ω—è—é—â–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —á–µ–ª–æ–≤–µ–∫—É. –û—Ñ–æ—Ä–º–∏ —ç—Ç–æ –∫–∞–∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –¥—Ä—É–≥–∏–µ —Å–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∑–∞–¥–∞–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Ü–µ, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–∏—á–µ–≥–æ –∑–∞ –≥—Ä–∞–Ω—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.',
    },
    ...conversationHistory,
    {
      role: 'user',
      content: '–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–±—ä—è—Å–Ω—è—é—â–µ–µ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ. –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –º–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.',
    },
  ];

  const completion = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages,
  });

  return completion.choices[0].message.content;
}

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  initializeSession(userId);
  const msg = await ctx.reply(INTRO_MESSAGE);
  const session = userSessions.get(userId);
  session.botMessageIds.push(msg.message_id);
});

bot.command('reset', async (ctx) => {
  const userId = ctx.from.id;
  initializeSession(userId);
  const msg = await ctx.reply(INTRO_MESSAGE);
  const session = userSessions.get(userId);
  session.botMessageIds.push(msg.message_id);
});

bot.help((ctx) => {
  ctx.reply('–ö–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ —Å–±—Ä–æ—Å–∏—Ç—å\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');
});

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userMessage = ctx.message.text;

  // Initialize session if doesn't exist
  if (!userSessions.has(userId)) {
    initializeSession(userId);
    const msg = await ctx.reply(INTRO_MESSAGE);
    const session = userSessions.get(userId);
    session.botMessageIds.push(msg.message_id);
    return;
  }

  const session = userSessions.get(userId);

  try {
    await ctx.sendChatAction('typing');

    if (session.state === 'waiting_for_theme') {
      // User provided theme
      session.theme = userMessage;
      session.state = 'asking_questions';
      
      // Add theme to conversation history
      session.conversationHistory.push({
        role: 'user',
        content: `–Ø —Ö–æ—á—É –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É: ${userMessage}`
      });
      
      const msg1 = await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–¥–∞–º –≤–∞–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ "${userMessage}", —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`);
      session.botMessageIds.push(msg1.message_id);
      
      // Generate and ask first question
      const question = await generateNextQuestion(session.conversationHistory, 1);
      session.conversationHistory.push({
        role: 'assistant',
        content: question
      });
      
      const msg2 = await ctx.reply(`–í–æ–ø—Ä–æ—Å 1: ${question}`);
      session.botMessageIds.push(msg2.message_id);

    } else if (session.state === 'asking_questions') {
      // Add user answer to conversation history
      session.conversationHistory.push({
        role: 'user',
        content: userMessage
      });
      
      session.currentQuestionIndex++;

      if (session.currentQuestionIndex < 5) {
        // Generate and ask next question based on conversation
        const question = await generateNextQuestion(session.conversationHistory, session.currentQuestionIndex + 1);
        session.conversationHistory.push({
          role: 'assistant',
          content: question
        });
        
        const msg = await ctx.reply(`–í–æ–ø—Ä–æ—Å ${session.currentQuestionIndex + 1}: ${question}`);
        session.botMessageIds.push(msg.message_id);
      } else {
        // All questions answered, generate summary
        session.state = 'generating_summary';
        const msg1 = await ctx.reply('–°–ø–∞—Å–∏–±–æ! –°–æ–∑–¥–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...');
        session.botMessageIds.push(msg1.message_id);
        
        const summary = await generateSummary(session.conversationHistory, session.theme);
        
        const msg2 = await ctx.reply(`üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n${summary}`);
        session.botMessageIds.push(msg2.message_id);
        
        // Reset for next round
        const oldBotMessageIds = [...session.botMessageIds];
        initializeSession(userId);
        const newSession = userSessions.get(userId);
        newSession.botMessageIds = oldBotMessageIds;
        
        const msg3 = await ctx.reply('\n---\n\n–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!');
        newSession.botMessageIds.push(msg3.message_id);
      }
    }

  } catch (error) {
    console.error('Error:', error);
    const msg = await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    session.botMessageIds.push(msg.message_id);
  }
});

bot.launch();

console.log('Bot is running...');

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
