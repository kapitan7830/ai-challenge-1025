import 'dotenv/config';
import { GitHubRepoAnalyzer } from './github-repo-analyzer.js';
import { StructureAnalyzer } from './structure-analyzer.js';
import { FileProcessor } from './file-processor.js';
import fs from 'fs/promises';
import path from 'path';

async function main() {
  const apiKey = process.env.OPENAI_API_KEY;
  const githubToken = process.env.GITHUB_TOKEN;

  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  // GitHub token –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  const repoAnalyzer = new GitHubRepoAnalyzer(githubToken);
  const structureAnalyzer = new StructureAnalyzer(apiKey);
  const fileProcessor = new FileProcessor();

  // –ü–æ–ª—É—á–∞–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const repoUrl = process.argv[2];
  
  if (!repoUrl) {
    console.error('‚ùå –£–∫–∞–∂–∏ URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
    console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  npm start https://github.com/owner/repo');
    console.log('  npm start owner/repo');
    process.exit(1);
  }

  try {
    console.log('üöÄ GitHub Structure Analyzer');
    console.log('='.repeat(80));

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    const { repoInfo, tree, treeText, importantFiles } = await repoAnalyzer.analyzeRepository(repoUrl);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    const processedFiles = fileProcessor.processFiles(importantFiles);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ AI
    const analysis = await structureAnalyzer.analyzeStructure(
      repoInfo,
      treeText,
      tree.files,
      processedFiles
    );

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ markdown
    const markdown = structureAnalyzer.formatMarkdown(repoInfo, analysis, treeText);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '='.repeat(80));
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:\n');
    console.log(analysis);
    console.log('\n' + '='.repeat(80));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const outputDir = path.join(process.cwd(), 'output');
    await fs.mkdir(outputDir, { recursive: true });
    
    const sanitizedName = repoInfo.fullName.replace('/', '-');
    const outputPath = path.join(outputDir, `${sanitizedName}-analysis.md`);
    
    await fs.writeFile(outputPath, markdown, 'utf-8');
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);

  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

main().catch(console.error);
