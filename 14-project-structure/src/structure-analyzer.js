import OpenAI from 'openai';

export class StructureAnalyzer {
  constructor(apiKey) {
    this.openai = new OpenAI({ apiKey });
  }

  async analyzeStructure(repoInfo, treeText, filesList, processedFiles = []) {
    console.log(`\nü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ AI...\n`);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const maxFiles = 500;
    const filesContext = filesList.slice(0, maxFiles).join('\n');
    const truncatedNote = filesList.length > maxFiles 
      ? `\n... (–ø–æ–∫–∞–∑–∞–Ω–æ ${maxFiles} –∏–∑ ${filesList.length} —Ñ–∞–π–ª–æ–≤)`
      : '';

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤
    let codeContext = '';
    if (processedFiles.length > 0) {
      console.log(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ${processedFiles.length} —Ñ–∞–π–ª–æ–≤...`);
      
      const configFiles = processedFiles.filter(f => f.isConfig);
      const codeFiles = processedFiles.filter(f => f.isCode);
      
      if (configFiles.length > 0) {
        codeContext += '\n## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n';
        for (const file of configFiles.slice(0, 10)) {
          codeContext += `### ${file.path}\n`;
          codeContext += '```\n';
          codeContext += file.keyParts || file.content.substring(0, 1000);
          codeContext += '\n```\n\n';
        }
      }
      
      if (codeFiles.length > 0) {
        codeContext += '\n## –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –∫–æ–¥–∞:\n\n';
        for (const file of codeFiles.slice(0, 15)) {
          codeContext += `### ${file.path}\n`;
          codeContext += `*–†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(1)} KB${file.isTruncated ? ' (–æ–±—Ä–µ–∑–∞–Ω)' : ''}*\n\n`;
          codeContext += '```\n';
          codeContext += file.keyParts || file.content.substring(0, 1000);
          codeContext += '\n```\n\n';
        }
      }
    }

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${repoInfo.fullName}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${repoInfo.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
- –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: ${repoInfo.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –ó–≤–µ–∑–¥: ${repoInfo.stars}

## –î–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:
${treeText}

## –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:
${filesContext}${truncatedNote}

${codeContext}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:

1. **–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞**: –ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç? (–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, API, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏ —Ç.–¥.)

2. **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫**: 
   - –ö–∞–∫–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏/–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?
   - –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?
   - –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–±–æ—Ä–∫–∏/—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏?

3. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**:
   - –ö–∞–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è? (MVC, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, –º–æ–Ω–æ–ª–∏—Ç, –∏ —Ç.–¥.)
   - –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã?
   - –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?

4. **–ö–ª—é—á–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏**:
   - –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   - –ï—Å—Ç—å –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞?

5. **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞**:
   - –ö–∞–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç?
   - –ï—Å—Ç—å –ª–∏ Docker, CI/CD, —Ç–µ—Å—Ç—ã?
   - –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?

6. **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞**:
   - –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ –∫–æ–¥–µ?
   - –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏?
   - –ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?

7. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã**:
   - –ß—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ?
   - –ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –ø—Ä–æ–µ–∫—Ç?
   - –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ?

–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è.`;

    const completion = await this.openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π software architect –∏ tech lead. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–π –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
    });

    const analysis = completion.choices[0].message.content;
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n`);
    
    return analysis;
  }

  formatMarkdown(repoInfo, analysis, treeText) {
    let md = `# ${repoInfo.fullName}\n\n`;
    
    if (repoInfo.description) {
      md += `> ${repoInfo.description}\n\n`;
    }

    md += `## –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n`;
    md += `- **URL**: ${repoInfo.url}\n`;
    if (repoInfo.language) {
      md += `- **–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫**: ${repoInfo.language}\n`;
    }
    md += `- **–ó–≤–µ–∑–¥**: ${repoInfo.stars}\n`;
    md += `- **–§–æ—Ä–∫–æ–≤**: ${repoInfo.forks}\n`;
    md += `- **–í–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**: ${repoInfo.defaultBranch}\n\n`;

    md += `## –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
    md += analysis;
    
    md += `\n\n## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π\n\n`;
    md += '```\n';
    md += treeText;
    md += '```\n';

    return md;
  }
}


